diff --git a/Source/WebCore/page/DOMWindow.cpp b/Source/WebCore/page/DOMWindow.cpp
index 546b4a4ddeeb..13852bcb263f 100644
--- a/Source/WebCore/page/DOMWindow.cpp
+++ b/Source/WebCore/page/DOMWindow.cpp
@@ -27,6 +27,8 @@
 #include "config.h"
 #include "DOMWindow.h"
 
+#include "GCController.h"
+
 #include "BackForwardController.h"
 #include "BarProp.h"
 #include "CSSComputedStyleDeclaration.h"
@@ -1122,6 +1124,9 @@ void DOMWindow::stop()
 
 void DOMWindow::alert(const String& message)
 {
+    WebCore::GCController::singleton().garbageCollectNow();
+    return;
+
     RefPtr frame = this->frame();
     if (!frame)
         return;
diff --git a/Source/WebKit/UIProcess/Launcher/glib/ProcessLauncherGLib.cpp b/Source/WebKit/UIProcess/Launcher/glib/ProcessLauncherGLib.cpp
index 124bfc3f16e8..137ae153100c 100644
--- a/Source/WebKit/UIProcess/Launcher/glib/ProcessLauncherGLib.cpp
+++ b/Source/WebKit/UIProcess/Launcher/glib/ProcessLauncherGLib.cpp
@@ -41,6 +41,8 @@
 #include <wtf/glib/Sandbox.h>
 #include <wtf/text/CString.h>
 #include <wtf/text/WTFString.h>
+#include <sys/types.h>
+#include <sys/wait.h>
 
 #if !USE(SYSTEM_MALLOC) && OS(LINUX)
 #include <bmalloc/valgrind.h>
@@ -68,6 +70,151 @@ static bool isFlatpakSpawnUsable()
 }
 #endif
 
+void HandleAsanReport(pid_t pid) {
+  // 1. Get the "log_path" from ASAN_OPTIONS.
+  // 2. Copy the log_path.[pid] to log_path.[mypid].
+  char *options = getenv("ASAN_OPTIONS");
+  if (options == NULL) {
+    fprintf(stdout, "[webkitfuzz]: error: no ASAN_OPTIONS\n");
+    return;
+  }
+
+  char *log_path = strstr(options, "log_path=");
+  if (log_path == NULL) {
+    fprintf(stdout, "[webkitfuzz]: error: no ASAN log_path=\n");
+    return;
+  }
+
+  log_path += sizeof("log_path=") - 1;  // Move to the value.
+
+  // This might not be the last option - find the separator and change it
+  // to a NUL-terminator.
+  log_path = strdup(log_path);
+
+  char *p = strchr(log_path, ',');
+  if (p != NULL) {
+    *p = '\0';
+  }
+
+  char pid_as_string[32] = {0};
+
+  char *src_path = (char *)malloc(strlen(log_path)+32);
+  strcpy(src_path,log_path);
+  strcat(src_path, ".");
+  snprintf(pid_as_string, sizeof(pid_as_string), "%i", pid);
+  strcat(src_path, pid_as_string);
+
+  char *dst_path = (char *)malloc(strlen(log_path)+32);
+  strcpy(dst_path,log_path);
+  strcat(dst_path, ".");
+  snprintf(pid_as_string, sizeof(pid_as_string), "%i", getpid());
+  strcat(dst_path, pid_as_string);
+
+  free(log_path);
+
+    FILE *f_src = fopen(src_path, "rb");
+  if (f_src == NULL) {
+    fprintf(stdout, "error: %s not found\n", src_path);
+    return;
+  }
+
+  FILE *f_dst = fopen(dst_path, "wb");
+  if (f_dst == NULL) {
+    fprintf(stdout, "error: %s not found\n", dst_path);
+    fclose(f_src);
+    return;
+  }
+
+  char *buffer = (char *)malloc(64 * 1024);
+  for (;;) {
+    size_t r = fread(buffer, 1, 64 * 1024, f_src);
+    if (r == 0) {
+      break;
+    }
+
+    fwrite(buffer, 1, r, f_dst);
+  }
+  free(buffer);
+
+  fclose(f_dst);
+  fclose(f_src);
+  fprintf(stdout, "[webkitfuzz]: note: ASAN logs copied from %s to %s\n",
+          src_path, dst_path);
+  free(src_path);
+  free(dst_path);
+}
+
+void *wait_thread(void *arg) {
+  fprintf(stdout, "[webkitfuzz]: Started WebProcess, starting monitoring thread.\n");
+
+  pid_t pid = (pid_t)(size_t)arg;
+
+  fprintf(stdout, "[webkitfuzz]: pid: %i\n", pid);
+
+  for (;;) {
+    int status = 0;
+    pid_t ev_pid = waitpid(pid, &status, __WALL);
+
+    fprintf(stdout, "[webkitfuzz]: ev_pid: %i, status: %.8x\n", ev_pid, status);
+
+    if (ev_pid == -1) {
+      if (errno == ECHILD) {
+        fprintf(stdout, "[webkitfuzz]: all children exited\n");
+        return NULL;
+      }
+      fprintf(stdout, "[webkitfuzz]: errno: %i\n", errno);
+      perror("error");
+      return NULL;
+    }
+
+    long deliver_sig = 0;  // NOLINT
+
+    // Check if the process actually crashed.
+    if ((status & 0xff) == 0x7f && (status & 0xffff0000) == 0) {
+      // An actual signal.
+      int sig = (status >> 8) & 0xff;
+
+      switch (sig) {
+        case SIGFPE:
+        case SIGSEGV:
+        case SIGILL:
+          fprintf(stdout, "  ^ crashed!\n");
+          deliver_sig = sig;
+          kill(getpid(), sig);
+          return NULL;
+
+        default:
+          fprintf(stdout, "  ^ delivering signal\n");
+          break;
+      }
+    }
+
+    // Maybe normal exit?
+    if ((status & 0xff) == 0x00) {
+      int exit_code = (status >> 8) & 0xff;
+      const int kAsanMagicExitCode = 42;
+
+      switch (exit_code) {
+        case 0:  // Clean exit.
+          fprintf(stdout, "  ^ clean exit!\n");
+          return NULL;
+
+        case kAsanMagicExitCode:
+          fprintf(stdout, "  ^ ASAN!\n");
+          HandleAsanReport(ev_pid);
+          exit(kAsanMagicExitCode);
+
+        default:
+          fprintf(stdout, "  ^ unclean exit!\n");
+          return NULL;
+      }
+    }
+  }
+  return NULL;
+}
+
+
+
 void ProcessLauncher::launchProcess()
 {
     IPC::Connection::SocketPair socketPair = IPC::Connection::createPlatformConnection(IPC::Connection::ConnectionOptions::SetCloexecOnServer);
@@ -170,6 +317,12 @@ void ProcessLauncher::launchProcess()
     m_processIdentifier = g_ascii_strtoll(processIdStr, nullptr, 0);
     RELEASE_ASSERT(m_processIdentifier);
 
+    pthread_t thread_id;
+    int retval = pthread_create(&thread_id, NULL, wait_thread, (void *)m_processIdentifier);
+    if (retval != 0) {
+      g_error("[webkitfuzz]: pthread_create failed\n");
+    }
+
     // Don't expose the parent socket to potential future children.
     if (!setCloseOnExec(socketPair.client))
         RELEASE_ASSERT_NOT_REACHED();
diff --git a/Tools/PlatformGTK.cmake b/Tools/PlatformGTK.cmake
index 37e1b0b7138d..5b9579597912 100644
--- a/Tools/PlatformGTK.cmake
+++ b/Tools/PlatformGTK.cmake
@@ -12,3 +12,5 @@ endif ()
 if (ENABLE_MINIBROWSER)
   add_subdirectory(MiniBrowser/gtk)
 endif ()
+
+add_subdirectory(webkitfuzz)
diff --git a/Tools/webkitfuzz/CMakeLists.txt b/Tools/webkitfuzz/CMakeLists.txt
new file mode 100644
index 000000000000..d71e14610257
--- /dev/null
+++ b/Tools/webkitfuzz/CMakeLists.txt
@@ -0,0 +1,40 @@
+set(WEBKITFUZZ_DIR "${TOOLS_DIR}/webkitfuzz")
+
+set(webkitfuzz_SOURCES
+    ${WEBKITFUZZ_DIR}/main.c
+)
+
+set(webkitfuzz_INCLUDE_DIRECTORIES
+    ${CMAKE_BINARY_DIR}
+    ${DERIVED_SOURCES_WEBKIT2GTK_DIR}
+    ${FORWARDING_HEADERS_WEBKIT2GTK_DIR}
+    ${FORWARDING_HEADERS_DIR}
+    ${CMAKE_SOURCE_DIR}/Source
+)
+
+set(webkitfuzz_SYSTEM_INCLUDE_DIRECTORIES
+    ${GTK3_INCLUDE_DIRS}
+    ${GLIB_INCLUDE_DIRS}
+    ${LIBSOUP_INCLUDE_DIRS}
+)
+
+set(webkitfuzz_LIBRARIES
+    ${JavaScriptCore_LIBRARY_NAME}
+    WebKit
+    ${GTK3_LIBRARIES}
+    ${GLIB_LIBRARIES}
+    ${LIBSOUP_LIBRARIES}
+)
+
+if (DEVELOPER_MODE)
+    add_definitions(-DWEBKIT_INJECTED_BUNDLE_PATH="${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
+endif ()
+
+add_definitions(-DGDK_VERSION_MIN_REQUIRED=GDK_VERSION_3_6)
+
+include_directories(${webkitfuzz_INCLUDE_DIRECTORIES})
+include_directories(SYSTEM ${webkitfuzz_SYSTEM_INCLUDE_DIRECTORIES})
+add_executable(webkitfuzz ${webkitfuzz_SOURCES})
+target_link_libraries(webkitfuzz ${webkitfuzz_LIBRARIES})
+
+install(TARGETS webkitfuzz DESTINATION "${LIBEXEC_INSTALL_DIR}")
diff --git a/Tools/webkitfuzz/main.c b/Tools/webkitfuzz/main.c
new file mode 100644
index 000000000000..a02da70dd451
--- /dev/null
+++ b/Tools/webkitfuzz/main.c
@@ -0,0 +1,125 @@
+#include <gtk/gtk.h>
+#include <webkit2/webkit2.h>
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+#include <sys/types.h>
+#include <sys/wait.h>
+#include <errno.h>
+
+#define TIMEOUT 15000
+
+static void destroyWindowCb(GtkWidget* widget, GtkWidget* window);
+static gboolean closeWebViewCb(WebKitWebView* webView, GtkWidget* window);
+
+#define TYPE_URL 0
+#define TYPE_FILE 1
+
+gboolean timeout_kill(gpointer data) {
+  printf("timeout\n");
+  gtk_main_quit();
+  return true;
+}
+
+int main(int argc, char* argv[])
+{
+    int inputtype = TYPE_FILE;
+    char *databuf;
+
+    if(argc < 2) {
+        printf("Usage: %s <url|file> [timeout]\n", argv[0]);
+        return 43;
+    }
+
+    int timeout;
+    if(argc >= 3) {
+        timeout = atoi(argv[2])*1000;
+    } else {
+        timeout = TIMEOUT;
+    }
+
+    printf("webkitfuzz started: %s\n",argv[1]);
+
+    if((strncmp(argv[1],"http://", 7) == 0) || (strncmp(argv[1],"https://", 8) == 0)) {
+        inputtype = TYPE_URL;
+    } else {
+        inputtype = TYPE_FILE;
+        FILE *fp = fopen(argv[1], "rb");
+        if(!fp) {
+            printf("Error opening %s\n", argv[1]);
+            return 43;
+        }
+        fseek(fp, 0, SEEK_END);
+        size_t filesize = ftell(fp);
+        fseek(fp, 0, SEEK_SET);
+        databuf = (char *)malloc(filesize+1);
+        fread(databuf, 1, filesize, fp);
+        databuf[filesize] = 0;
+        fclose(fp);
+    }
+
+    // Initialize GTK+
+    gtk_init(&argc, &argv);
+
+
+    // Create an 800x600 window that will contain the browser instance
+    GtkWidget *main_window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
+    //GtkWidget *main_window = gtk_offscreen_window_new();
+    gtk_window_set_default_size(GTK_WINDOW(main_window), 800, 600);
+
+    // Create a browser instance
+    WebKitWebView *webView = WEBKIT_WEB_VIEW(webkit_web_view_new());
+
+    // Set settings for console messages to be written to stdout
+    WebKitSettings *settings = webkit_web_view_get_settings(webView);
+    webkit_settings_set_enable_write_console_messages_to_stdout(settings, TRUE);
+
+    // Enable or disable WebGL
+    //webkit_settings_set_enable_webgl(settings, FALSE);
+
+    // Put the browser area into the main window
+    gtk_container_add(GTK_CONTAINER(main_window), GTK_WIDGET(webView));
+
+    // Set up callbacks so that if either the main window or the browser instance is
+    // closed, the program will exit
+    g_signal_connect(main_window, "destroy", G_CALLBACK(destroyWindowCb), NULL);
+    g_signal_connect(webView, "close", G_CALLBACK(closeWebViewCb), main_window);
+
+    // Load a web page into the browser instance
+    if(inputtype == TYPE_URL) {
+       webkit_web_view_load_uri(webView, argv[1]);
+    } else {
+       webkit_web_view_load_html(webView, databuf, NULL);
+    }
+
+    // Make sure that when the browser area becomes visible, it will get mouse
+    // and keyboard events
+    gtk_widget_grab_focus(GTK_WIDGET(webView));
+
+    g_timeout_add (timeout, timeout_kill, NULL);
+
+    // Make sure the main window and all its contents are visible
+    gtk_widget_show_all(main_window);
+
+    // Run the main GTK+ event loop
+    gtk_main();
+
+    printf("exiting\n");
+
+    return 43;
+}
+
+
+static void destroyWindowCb(GtkWidget* widget, GtkWidget* window)
+{
+    gtk_main_quit();
+}
+
+static gboolean closeWebViewCb(WebKitWebView* webView, GtkWidget* window)
+{
+    gtk_widget_destroy(window);
+    return TRUE;
+}
+
